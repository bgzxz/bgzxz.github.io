<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bgzxz&#39;s Blog</title>
    <link>https://bgzxz.github.io/</link>
    <description>Recent content on bgzxz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>bgzxz1987@email.com (bgzxz)</managingEditor>
    <webMaster>bgzxz1987@email.com (bgzxz)</webMaster>
    <lastBuildDate>Sat, 01 Jun 2019 08:11:54 +0800</lastBuildDate>
    
	<atom:link href="https://bgzxz.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入浅出https和nginx https配置</title>
      <link>https://bgzxz.github.io/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAhttps%E5%92%8Cnginx-https%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 01 Jun 2019 08:11:54 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAhttps%E5%92%8Cnginx-https%E9%85%8D%E7%BD%AE/</guid>
      <description>为什么需要https 互联网的早期设计很少考虑安全，核心协议基本都是不安全的，只能依靠所有的参与方的诚信行为来保证安全。早期的互联网的只有少数的几个节点构成，那时这种方式也许可行。但是随着全球互联网的飞速的发展，我们的日常生活中的方方面面都在使用互联网，比如在线购物，在线交易，实时聊天等。这些日常使用的在线服务很多都涉及用户的敏感数据和隐私数据以及资金账户数据，而这些数据基本都是通过广泛使用的http协议来传输的，因此实现一种安全的http协议就非常的有价值和重要。
https是什么 由于网络协议是通过分层结构来组织的，提供了很好的扩展性，因此在设计安全的http时就可以不用重新设计协议，而是利用网络协议的分层结构，在http协议的下一层来解决安全传输问题，这样不仅可以解决http协议的安全问题，同时也可以解决其他应用层协议的安全问题，从而实现一套通用的安全传输层，由此TLS协议就诞生了（前身SSL）。因此https可以解释为HTTP over TLS。
TLS协议 目标  加密安全
为任意交换数据的双方提供隐私和数据完成性以及身份认证
 互操作性
独立的开发人员能够使用通用的加密参数开发程序和库，使它们可以相互通信
 可扩展性
高效开发和部署加密协议，以及扩展协议
 效率
性能成本在可接受范围
  TLS在OSI模型中的位置 协议历史 本文将重点介绍这1.3和1.2两个版本
TLS中的密码学 由于TLS是在现代密码学的基础上构建出来的，因此在了解TLS之前，必须对密码学的基础知识有一定的了解。
安全的三个核心需求为：保持秘密（机密性）、验证身份（真实性），保证传输安全（完整性）。而要解决这些核心需求，必须通过组合各种加密基元来实现相应的功能。
 对称加密
对称加密又称私钥加密，是一种混淆算法，能够让数据在非安全信道上进行安全通信。
 散列函数
散列函数是将任意长度的输入转化为定长输出的算法。散列函数的结果经常被简称为散列（Hash）。密码学散列函数必须具备以下特征：
 抗原像性（单向性）
给定一个散列，计算上无法找到或者构造出生成它的消息
 抗第二原像性(弱抗碰撞性)
给定一条消息和它的散列，计算上无法找到一条不同的消息具有相同的散列
 强抗碰撞性
计算上无法找到两条散列相同的消息
  消息验证码
散列函数可以用于验证数据完整性，但仅在数据的散列和数据本身分开传输的条件下如此。消息验证码（MAC）或者使用密钥的散列是以身份验证扩展了散列函数的密码学函数。只有拥有散列密钥，才能生成合法的MAC。
 分组密码模式
分组密码模式是为了加密任意长度的数据而设计的密码学方案，是对称密码的扩展。所有分组密码模式都支持机密性，不过有些将其与身份验证联系起来。
 非对称加密
非对称加密又称公约加密，它是另一种方法，使用两个密钥，而不是一个；其中一个密钥是私密的，另一个是公开的。公钥加密的数据只能用私钥才能解密。私钥加密的数据任何人都可以用公钥解密。后者不提供机密性，但是可以用作数字签名。
 数字签名
数字签名（又称公钥数字签名）是一种类似写在纸上的普通的物理签名，但是使用了公钥加密领域的技术实现，用于鉴别数字信息的方法。 一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。 数字签名，就是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。
 随机数生成
在密码学中，所有的安全性都依赖于生成随机数的质量。
  只有将这些加密基元组合成方案和协议才能满足复杂的安全需要，TLS就是这样的一个协议。
TLS协议 纪录协议 TLS以纪录协议实现。纪录协议负责在传输连接上交换的所有底层消息，并配置加密。
TLS主要包含四个核心子协议：握手协议，密钥规格变更协议，应用数据协议，警报协议。下面主要介绍握手协议。
 握手协议</description>
    </item>
    
    <item>
      <title>使用nginx和keepalived构建高可用websocket</title>
      <link>https://bgzxz.github.io/posts/build_highly_available_websockets_using_nginx_and_keepalived/</link>
      <pubDate>Fri, 24 May 2019 20:11:54 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/build_highly_available_websockets_using_nginx_and_keepalived/</guid>
      <description>背景： 日常项目中的消息推送，im等需求会使用到websocket，项目对于高可用和扩展性要求比较高的时候就必须使用一些HA和负载均衡方案，本文将基于keepalived和nginx构建高可用websocket部署。
部署架构图： 软件配置： server1：
keepalived配置
global_defs { } vrrp_script chk_nginx { script &amp;#34;killall -0 nginx&amp;#34; # cheaper than pidof interval 2 # check every 2 seconds } vrrp_instance VI_1 { state BACKUP interface enp0s3 virtual_router_id 51 priority 50 advert_int 1 virtual_ipaddress { 192.168.1.110 } track_script { chk_nginx } } vrrp_instance VI_2 { state MASTER interface enp0s3 virtual_router_id 52 priority 100 advert_int 1 virtual_ipaddress { 192.168.1.112 } track_script { chk_nginx } }  nginx配置：</description>
    </item>
    
    <item>
      <title>nginx限流</title>
      <link>https://bgzxz.github.io/posts/nginx_limit_req/</link>
      <pubDate>Wed, 22 May 2019 20:31:34 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/nginx_limit_req/</guid>
      <description>配置： http { limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s; server { location /search/ { limit_req zone=one burst=5; limit_req_log_level error; limit_req_status 429; } error_page 429 /429.html; } }
配置指令含义：
limit_req_zone key zone=name:size rate=rate; 配置根据key来限制请求速率 limit_req zone=one burst=5; 设置限流使用的zone和爆发数 limit_req_log_level 设置被限流的请求的日志纪录级别 limit_req_status 设置被限流请求的状态相应码</description>
    </item>
    
    <item>
      <title>redis cluster环境搭建</title>
      <link>https://bgzxz.github.io/posts/redis-cluster/</link>
      <pubDate>Tue, 21 May 2019 20:31:34 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/redis-cluster/</guid>
      <description>redis cluster是什么？ 官网解答
如何搭建集群环境？ 1.官网下载源码 wget http://download.redis.io/releases/redis-5.0.5.tar.gz
2.编译安装程序 tar -xzf redis-5.0.5.tar.gz cd redis-5.0.5 make make make install
3.使用源码包utils里的install_server.sh快速配置redis server分布如下： 192.168.1.2 6379 192.168.1.6 6379 6380 6381 6382 192.168.1.7 6379 6380 6381  4.修改生成的配置文件，开启redis集群功能 cluster-enabled yes cluster-config-file nodes.conf cluster-node-timeout 5000 5.通过redis-server /etc/redis/***.conf启动server
6.通过ps -ef | grep redis-server 确认server启动
7.通过redis-cli 连接相应的节点，执行info命令，确保节点可访问，并开启了集群功能
8.通过redis-cli &amp;ndash;cluster 工具初始化集群 redis-cli --cluster create 192.168.1.2:6379 192.168.1.6:6379 192.168.1.6:6380 192.168.1.6:6381 192.168.1.6:6382 192.168.1.7:6379 192.168.1.7:6380 192.168.1.7:6381 --cluster-replicas 1 工具会提示如下信息，主要是用来显示集群的Slot是如何分配，以及复制关系 &amp;gt;&amp;gt;&amp;gt; Performing hash slots allocation on 8 nodes.</description>
    </item>
    
    <item>
      <title>metrics领域的SLF4J(Micrometer)</title>
      <link>https://bgzxz.github.io/posts/micrometer/</link>
      <pubDate>Thu, 02 May 2019 22:31:34 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/micrometer/</guid>
      <description>Micrometer是什么？ 供应商中立的应用程序指标facade库
Micrometer为用于最流行的监控系统的仪表客户端提供了一个简单的facade，允许您在没有供应商锁定的情况下检测基于JVM的应用程序代码。可以理解为metrics领域的SLF4J。
Micrometer实现了哪些功能？  多维度的Metrics
timers, gauges, counters, distribution summaries, and long task timers
 预配置的绑定
Out-of-the-box instrumentation of caches, the class loader, garbage collection, processor utilization, thread pools, and more tailored to actionable insight
 spring集成
Starting with Spring Boot 2.0, Micrometer is the instrumentation library powering the delivery of application metrics from Spring. Support is ported back to Boot 1.x through an additional library dependency
 支持各种流行的监控系统</description>
    </item>
    
    <item>
      <title>实现应用程序可观察性的3种方式</title>
      <link>https://bgzxz.github.io/posts/observability_3_ways/</link>
      <pubDate>Wed, 01 May 2019 22:31:34 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/observability_3_ways/</guid>
      <description> 项目上线报错了，
线上功能报错了，
用户投诉页面卡顿了，
系统故障导致业务数据异常了 。。。
作为程序员，在日常的工作中总是要面对如上的哪些问题。只有更多的了解系统的内部状态信息，才能更快更精确的定位和解决这些问题。那么如何让系统提供更多的有用信息了。
提升系统的可观测性可以从以下三个方法中获取：
 Logging - 纪录事件
 Metrics － 纪录指标数据事件
 Tracing － 纪录系统之间的因果关系事件
  参考资料 </description>
    </item>
    
    <item>
      <title>使用jmh进行基准测试</title>
      <link>https://bgzxz.github.io/posts/java_benchmark/</link>
      <pubDate>Sat, 09 Mar 2019 14:11:54 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/java_benchmark/</guid>
      <description>什么是基准测试 基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。
java基准测试工具jmh 官方介绍
JMH is a Java harness for building, running, and analysing nano/micro/milli/macro benchmarks written in Java and other languages targetting the JVM.
使用官网mvn骨架工程创建项目 命令行方式
mvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=org.openjdk.jmh -DarchetypeArtifactId=jmh-java-benchmark-archetype -DarchetypeVersion=1.21 -DgroupId=io.docbot -DartifactId=jmh-example -Dversion=1.0-SNAPSHOT -DarchetypeCatalog=https://maven.aliyun.com/repository/public/archetype-catalog.xml idea方式
idea新建maven项目并添加骨架类型
填写必要的项目信息 第一个例子 package io.docbot; import org.openjdk.jmh.annotations.Benchmark; import org.openjdk.jmh.annotations.BenchmarkMode; import org.openjdk.jmh.annotations.Mode; import org.openjdk.jmh.annotations.OutputTimeUnit; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.concurrent.TimeUnit; public class MyBenchmark { @Benchmark @BenchmarkMode(Mode.AverageTime) @OutputTimeUnit(TimeUnit.MILLISECONDS) public void testMethod() { try { Thread.</description>
    </item>
    
    <item>
      <title>java注解处理器</title>
      <link>https://bgzxz.github.io/posts/annotation-processing/</link>
      <pubDate>Sun, 11 Mar 2018 22:11:54 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/annotation-processing/</guid>
      <description>最近发现周围的一些小伙伴开始像下面这样写DTO了
import lombok.AccessLevel; import lombok.Setter; import lombok.Data; import lombok.ToString; @Data public class ExampleDTO { private final String name; @Setter(AccessLevel.PACKAGE) private int age; private double score; private String[] tags; @ToString(includeFieldNames=true) @Data(staticConstructor=&amp;#34;of&amp;#34;) public static class Exercise&amp;lt;T&amp;gt; { private final String name; private final T value; } } 顺着引用的包路径找到lombok这个包，看了下官网的介绍
Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java. Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</description>
    </item>
    
    <item>
      <title>Full Stack</title>
      <link>https://bgzxz.github.io/posts/full_stack/</link>
      <pubDate>Mon, 05 Feb 2018 17:34:52 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/full_stack/</guid>
      <description>facebook the-full-stack-part阅读心得
1,全栈工程师是个通才，能理解软件系统的不同层的行为
2,通过应用的行为就能想得到软件栈的行为
3,对系统的数据形成和数据流有深刻的认识，从而能更好的设计和优化系统
一些有用的理解数据形成和数据流的因素:
 Working data size Average request size Request rate Mutation rate Consistency Locality Computation Latency Contention  </description>
    </item>
    
    <item>
      <title>每个软件工程师都应该知道的延迟数据</title>
      <link>https://bgzxz.github.io/posts/numbers_everyone_should_know/</link>
      <pubDate>Thu, 01 Feb 2018 16:16:05 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/numbers_everyone_should_know/</guid>
      <description>图片来源于Jeff Dean大神的分享</description>
    </item>
    
    <item>
      <title>语义化版本</title>
      <link>https://bgzxz.github.io/posts/semantic_versioning/</link>
      <pubDate>Wed, 03 Jan 2018 08:31:34 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/semantic_versioning/</guid>
      <description>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：
1.主版本号：当你做了不兼容的 API 修改
2.次版本号：当你做了向下兼容的功能性新增
3.修订号：当你做了向下兼容的问题修正
先行版本号及版本编译元数据可以加到“主版本号.次版本号.修订号”的后面，作为延伸。
作为一位负责任的开发者，你理当确保每次包升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级包，而无需推出新的依赖包，节省你的时间及烦恼。
更多细节见官网</description>
    </item>
    
    <item>
      <title>使用hugo和github搭建个人blog</title>
      <link>https://bgzxz.github.io/posts/build_blog_use_hugo_and_github/</link>
      <pubDate>Mon, 01 Jan 2018 14:11:54 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/build_blog_use_hugo_and_github/</guid>
      <description>hugo简介 golang实现的高性能静态站点生辰工具
更多细节见官方网站
安装hugo Homebrew (macOS)
brew install hugo 源码安装 git clone https://github.com/gohugoio/hugo.git cd hugo go install --tags extended
更多安装方式见官方文档
验证安装 执行hugo version,显示版本号表示安装成功
创建一个site hugo new site quickstart 添加主题 cd quickstart; git init; git submodule add https://github.com/aos/temple.git themes/temple; # Edit your config.toml configuration file # and add the temple theme. echo &amp;#39;theme = &amp;#34;temple&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml 添加文章 hugo new posts/my-first-post.md 启动本地服务并验证页面 hugo server -D Start Hugo dev server... | EN +------------------+----+ Pages | 11 Paginator pages | 0 Non-page files | 0 Static files | 1 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Total in 26 ms Watching for changes in /Users/bgxzx/my-site/blog/{content,data,layouts,static,themes} Watching for config changes in /Users/bgxzx/my-site/blog/config.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://bgzxz.github.io/about/</link>
      <pubDate>Sun, 31 Dec 2017 11:18:03 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/about/</guid>
      <description>后端程序猿
喜欢阅读技术书籍和文章</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://bgzxz.github.io/posts/my-first-post/</link>
      <pubDate>Sat, 30 Dec 2017 23:31:34 +0800</pubDate>
      <author>bgzxz1987@email.com (bgzxz)</author>
      <guid>https://bgzxz.github.io/posts/my-first-post/</guid>
      <description>Hello Hugo!</description>
    </item>
    
  </channel>
</rss>